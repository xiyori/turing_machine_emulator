///    This file describes visual_turing language standard.
///    "//" in the beginning of the line marks a comment,
///    thus the line will not be processed by the compiler.
///    Use more comments and your life will become much easier!

///    Firstly, write the machine's name and a short description:

// Example - Turing machine demonstrating visual_turing language

///    It is a good practice to specify both input and output format:

// Input:
// 00000...0
// ^

///    "^" marks the place for the machine's head

// Output:
// 11111...1
// ^

///    start <state> defines the initial state,
///    end <state> defines the final state, fin <state> is also possible
///    Any string without spaces ' ' and commas ',' can be used as a state id:

start beg_state
end final_state

///    E.g. "start beg state,first" will result in undefined behavior.
///    You can specify the start and end states anywhere in the code.

///    The transition syntax is pretty simple:
///    (<current_state>, '<input tape character>') -> (<next_state>, '<output character>', <head movement>)
///    The "->" in the middle is not required, so the following also compiles without errors:
///    (s1, '0')(s2, '1', 0)

(beg_state, '0') -> (beg_state, '1', 1)        Any comment can be inserted after the transition.
(beg_state, ' ') -> (backward_state, ' ', -1)  "//" is not required, but highly recommended.

///    Example of comment usage:

(backward_state, '1') -> (backward_state, '1', -1)  // move caret backwards after processing input
(backward_state, ' ') -> (final_state, ' ', 1)      // position caret on the first symbol of the output and stop

///    Alphabet symbols and additional states are automatically added in compile-time,
///    so there is no need to specify them explicitly.

///    Enjoy the ride!
